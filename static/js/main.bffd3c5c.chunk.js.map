{"version":3,"sources":["components/Layout/index.tsx","context/AppContext.ts","components/UI/Link/index.tsx","components/ChampionList/index.tsx","services/httpClient.ts","services/getAllChampions.ts","routes/Champions/index.tsx","components/SeasonRaces/index.tsx","services/getSeasonDetails.ts","routes/SeasonDetails/index.tsx","App.tsx","hooks/useAppContext.ts","serviceWorker.ts","index.tsx"],"names":["AppLayout","children","className","AppContext","React","createContext","allChampions","setAllChampions","Link","to","state","pathname","ChampionList","rows","data","map","name","nationality","wins","points","team","season","driverId","key","Button","Table","responsive","striped","bordered","hover","httpClient","config","JSON_TYPE","instance","axios","create","baseURL","headers","common","Accept","post","put","patch","getAllChampions","a","startYear","endYear","instances","push","get","all","then","spread","responses","catch","errors","console","log","response","getFormattedSeasonsData","apiSeasonList","reduce","acc","item","MRData","StandingsTable","StandingsLists","DriverStandings","Driver","familyName","givenName","Constructors","Champions","useState","loading","setLoading","useContext","useEffect","fetchSeasonsData","prevState","length","Spinner","animation","variant","SeasonRaces","ChampionId","time","raceName","getSeasonDetails","year","url","error","getFormattedData","RaceTable","Races","date","Results","Constructor","Time","Details","seasonDetails","setSeasonDetails","useParams","useLocation","result","App","context","setAllChampionData","useCallback","useAppContext","Provider","value","basename","exact","path","component","SeasonDetails","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bffd3c5c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Layout.css\";\n\ninterface LayoutProps {\n  children: JSX.Element[] | JSX.Element;\n}\n\nconst AppLayout = ({ children }: LayoutProps) => {\n  return (\n    <div className=\"app-layout\">\n      <header className=\"app-header\"></header>\n      <div className=\"app-container\">{children}</div>\n    </div>\n  );\n};\n\nexport default AppLayout;\n","import React from \"react\";\n\nexport interface AppContextTypes {\n  allChampions: Array<any>;\n  setAllChampions: (currentData: any) => void;\n}\n\nexport const URL_DEFAULT_VALUE = {\n  allChampions: [],\n  setAllChampions: () => {},\n};\n\nexport const AppContext = React.createContext<AppContextTypes>(\n  URL_DEFAULT_VALUE\n);\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\ninterface LinkProps {\n  children: JSX.Element[] | JSX.Element;\n  to: string;\n  state?: any;\n}\n\nconst Link = ({ to, children, state }: LinkProps) => {\n  return (\n    <RouterLink\n      to={{\n        pathname: to,\n        state: state,\n      }}\n    >\n      {children}\n    </RouterLink>\n  );\n};\n\nexport default Link;\n","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { ChampionsList } from \"../../services/getAllChampions\";\nimport Link from \"../UI/Link\";\nimport \"./ChampionList.css\";\n\ninterface ChampionListProps {\n  data: Array<ChampionsList>;\n}\n\nconst ChampionList = ({ data }: ChampionListProps) => {\n  const rows = data.map(\n    ({\n      name,\n      nationality,\n      wins,\n      points,\n      team,\n      season,\n      driverId,\n    }: ChampionsList) => (\n      <tr key={season}>\n        <td>{season}</td>\n        <td>{name}</td>\n        <td>{nationality}</td>\n        <td>{team}</td>\n        <td>{wins}</td>\n        <td>{points}</td>\n        <td className=\"button-holder\">\n          <Link to={`season/${season}`} state={{ driverId }}>\n            <Button>Details</Button>\n          </Link>\n        </td>\n      </tr>\n    )\n  );\n\n  return (\n    <Table responsive striped bordered hover>\n      <thead>\n        <tr>\n          <th>Season</th>\n          <th>Name</th>\n          <th>Nationality</th>\n          <th>Team</th>\n          <th>Wins</th>\n          <th>Points</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </Table>\n  );\n};\nexport default ChampionList;\n","import axios, { AxiosRequestConfig } from \"axios\";\n\nconst baseURL = \"http://ergast.com/api/f1\";\n\nconst httpClient = (config?: AxiosRequestConfig) => {\n  const JSON_TYPE = \"application/json\";\n  const instance = axios.create({\n    baseURL,\n    headers: {\n      common: { Accept: JSON_TYPE },\n      post: { \"Content-Type\": JSON_TYPE },\n      put: { \"Content-Type\": JSON_TYPE },\n      patch: { \"Content-Type\": JSON_TYPE },\n    },\n    ...config,\n  });\n\n  return {\n    instance,\n  };\n};\n\nexport default httpClient;\n","import axios from \"axios\";\nimport httpClient from \"./httpClient\";\n\ninterface Period {\n  startYear: number;\n  endYear: number;\n}\n\ninterface GetAllChampions {\n  (arg: Period): Promise<Array<ChampionsList>>;\n}\n\nexport interface ChampionsList {\n  name: string;\n  nationality: string;\n  points: string;\n  season: string;\n  team: string;\n  wins: string;\n  driverId: string;\n}\n\nconst getAllChampions: GetAllChampions = async ({ startYear, endYear }) => {\n  const instances = [];\n  const { instance } = httpClient();\n\n  while (endYear >= startYear) {\n    instances.push(instance.get(`${startYear}/driverStandings.json`));\n    startYear = startYear + 1;\n  }\n\n  const response = await axios\n    .all(instances)\n    .then(axios.spread((...responses) => responses))\n    .catch((errors) => {\n      console.log(\"Error!\");\n    });\n\n  if (response) {\n    return getFormattedSeasonsData(response);\n  }\n  return [];\n};\n\nconst getFormattedSeasonsData = <T>(apiSeasonList: T[]): Array<ChampionsList> =>\n  apiSeasonList.reduce((acc: any = [], item: any) => {\n    const {\n      season,\n      StandingsLists: [\n        {\n          DriverStandings: [\n            {\n              points,\n              wins,\n              Driver: { familyName, givenName, nationality, driverId },\n              Constructors: [{ name: team }],\n            },\n          ],\n        },\n      ],\n    } = item.data.MRData.StandingsTable;\n\n    acc.push({\n      season,\n      points,\n      wins,\n      name: `${givenName} ${familyName}`,\n      nationality,\n      team,\n      driverId,\n    });\n\n    return acc;\n  }, []);\n\nexport default getAllChampions;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport ChampionList from \"../../components/ChampionList\";\nimport { AppContext } from \"../../context/AppContext\";\nimport getAllChampions from \"../../services/getAllChampions\";\nimport \"./Champions.css\";\n\nconst Champions = () => {\n  const [loading, setLoading] = useState(false);\n  const { setAllChampions, allChampions } = useContext(AppContext);\n\n  useEffect(() => {\n    const fetchSeasonsData = async () => {\n      setLoading(true);\n      const startYear = 2005;\n      const endYear = 2015;\n      const data = await getAllChampions({ startYear, endYear });\n\n      setAllChampions((prevState: any) => [...prevState, ...data]);\n      setLoading(false);\n    };\n\n    if (allChampions.length === 0) {\n      fetchSeasonsData();\n    }\n  }, []);\n\n  return (\n    <div className=\"champions-wrapper\">\n      <div className=\"champions-header\">\n        <h1>2005 - 2015</h1>\n        <p> Formula1 races winners from 2005 to 2015.</p>\n      </div>\n      {allChampions && <ChampionList data={allChampions} />}\n      {loading && (\n        <div className=\"loader-holder\">\n          <Spinner animation=\"border\" variant=\"info\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Champions;\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { SeasonDetails } from \"../../services/getSeasonDetails\";\nimport \"./SeasonRaces.css\";\n\ninterface SeasonRacesProps {\n  driverId: number;\n  data: Array<SeasonDetails>;\n}\n\nconst SeasonRaces = ({ data, driverId: ChampionId }: SeasonRacesProps) => (\n  <Table responsive striped bordered hover>\n    <thead>\n      <tr>\n        <th>Race</th>\n        <th>Driver</th>\n        <th>Team</th>\n        <th>Nationality</th>\n        <th>Time</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map(\n        ({\n          name,\n          nationality,\n          team,\n          time,\n          raceName,\n          driverId,\n        }: SeasonDetails) => (\n          <tr key={raceName}>\n            <td>{raceName}</td>\n            <td>\n              {name}\n              {driverId === ChampionId && (\n                <span className=\"star\">&#10026;</span>\n              )}\n            </td>\n            <td>{team}</td>\n            <td>{nationality}</td>\n            <td>{time}</td>\n          </tr>\n        )\n      )}\n    </tbody>\n  </Table>\n);\n\nexport default SeasonRaces;\n","import httpClient from \"./httpClient\";\n\ninterface GetSeasonDetails {\n  (year: number): Promise<Array<SeasonDetails>>;\n}\n\nexport interface SeasonDetails {\n  name: string;\n  nationality: string;\n  points: string;\n  season: string;\n  team: string;\n  time: string;\n  raceName: string;\n  driverId: number;\n}\n\nconst getSeasonDetails = async (year: string) => {\n  const { instance } = httpClient();\n  const url = `${year}/results/1.json`;\n  const response = await instance\n    .get(url)\n    .catch((error) => console.log(\"Error!\"));\n\n  if (response) {\n    return getFormattedData(response.data.MRData.RaceTable.Races);\n  }\n  return [];\n};\n\nconst getFormattedData = <T>(data: T[]): Array<T> =>\n  data.reduce((acc: any = [], item: any) => {\n    const {\n      season,\n      date,\n      raceName,\n      Results: [\n        {\n          Driver: { familyName, givenName, nationality, driverId },\n          Constructor: { name: team },\n          Time: { time },\n        },\n      ],\n    } = item;\n\n    acc.push({\n      name: `${givenName} ${familyName}`,\n      season,\n      nationality,\n      date,\n      raceName,\n      team,\n      time,\n      driverId,\n    });\n\n    return acc;\n  }, []);\n\nexport default getSeasonDetails;\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport SeasonRaces from \"../../components/SeasonRaces\";\nimport Link from \"../../components/UI/Link\";\nimport getSeasonDetails from \"../../services/getSeasonDetails\";\nimport \"./SeasonDetails.css\";\n\nconst Details = () => {\n  const [seasonDetails, setSeasonDetails] = useState() as any;\n  const { year } = useParams();\n  const { state } = useLocation() as any;\n\n  useEffect(() => {\n    const fetchSeasonsData = async () => {\n      if (year) {\n        const result = await getSeasonDetails(year);\n        setSeasonDetails(result);\n      }\n    };\n    fetchSeasonsData();\n  }, [setSeasonDetails, year]);\n\n  return (\n    <div className=\"seasons-wrapper\">\n      <div className=\"seasons-header\">\n        <h1>{year} Season</h1>\n        <p></p>\n      </div>\n      <Link to=\"/\">\n        <Button variant=\"info\">{\"< Back to list\"}</Button>\n      </Link>\n      {seasonDetails && (\n        <SeasonRaces data={seasonDetails} driverId={state?.driverId || \"\"} />\n      )}\n    </div>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Layout from \"./components/Layout\";\nimport { AppContext } from \"./context/AppContext\";\nimport { useAppContext } from \"./hooks/useAppContext\";\nimport Champions from \"./routes/Champions\";\nimport SeasonDetails from \"./routes/SeasonDetails\";\n\nfunction App() {\n  const context = useAppContext();\n\n  return (\n    <AppContext.Provider value={context}>\n      <Layout>\n        <Router basename=\"/formula-champions\">\n          <Switch>\n            <Route exact path=\"/\" component={Champions} />\n            <Route exact path=\"/season/:year\" component={SeasonDetails} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </Router>\n      </Layout>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { AppContextTypes } from \"../context/AppContext\";\n\nexport const useAppContext = (): AppContextTypes => {\n  const [allChampions, setAllChampionData] = React.useState([]);\n\n  const setAllChampions = React.useCallback((state: any): void => {\n    setAllChampionData(state);\n  }, []);\n\n  return {\n    allChampions,\n    setAllChampions,\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}